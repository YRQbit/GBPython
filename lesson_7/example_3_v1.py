# Задание-3.
#
# Описание:
# 3. Реализовать программу работы с органическими клетками, состоящими из ячеек.
# Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов:
# сложение (add()), вычитание (sub()), умножение (mul()), деление (truediv()).
#
# Данные методы должны применяться ??только к клеткам?? и выполнять увеличение, уменьшение,
# умножение и целочисленное (с округлением до целого) деление клеток, соответственно.
#
# Сложение.
# Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
#
# Вычитание.
# Участвуют две клетки. Операцию необходимо выполнять только если разность
# количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
#
# Умножение.
# Создается общая клетка из двух. Число ячеек общей клетки определяется
# как произведение количества ячеек этих двух клеток.
#
# Деление.
# Создается общая клетка из двух. Число ячеек общей клетки определяется
# как целочисленное деление количества ячеек этих двух клеток.
#
# В классе необходимо реализовать метод make_order(),
# принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****...,
# где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
#
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n**.
#
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n*****.
#
# Подсказка: подробный список операторов для перегрузки доступен по ссылке.
#
#
#
# .

""
"""
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
ВАРИАНТ-1
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
"""

class Kletka():
    """ Необходимо создать Класс Клетка
    В его конструкторе инициализировать параметр,
    соответствующий количеству ячеек клетки, целое число """
    def __init__(self,kolich_yacheek_kletki=1):

        self.kolich_yacheek_v_Kletke = int(kolich_yacheek_kletki)

    def __add__(self, other):
        # Сложение. Перегрузка метода.
        # Объединение двух клеток.
        # При этом число ячеек ОБЩЕЙ Клетки должно равняться сумме ячеек ??исходных?? Клеток.
        Kletka.kolich_yacheek_v_Kletke = self.kolich_yacheek_v_Kletke + other.kolich_yacheek_v_Kletke
        return Kletka(Kletka.kolich_yacheek_v_Kletke)

    def __sub__(self, other):
        # Вычитание. Перегрузка метода.
        # Участвуют две клетки.
        # Операцию необходимо выполнять только если разность
        # количества ячеек двух клеток больше нуля,
        # иначе выводить соответствующее сообщение.
        raznica = self.kolich_yacheek_v_Kletke - other.kolich_yacheek_v_Kletke
        if raznica <= 0: return f"Внимание! Результат менее одной ячейки..."
        return raznica

    def __mul__(self, other):
        # Умножение. Перегрузка метода.
        # Создается общая клетка из двух.
        # Число ячеек общей клетки определяется
        # как произведение количества ячеек этих двух клеток.
        # .
        _Ячейки_Общей_Клетки = self.kolich_yacheek_v_Kletke * other.kolich_yacheek_v_Kletke
        return Kletka(_Ячейки_Общей_Клетки)

    def __truediv__(self, other):
        # Деление. Перегрузка метода.
        # Создается общая клетка из двух.
        # Число ячеек общей клетки определяется как целочисленное
        # деление количества ячеек этих двух клеток
        # .
        _Ячейки_Общей_Клетки = int(self.kolich_yacheek_v_Kletke / other.kolich_yacheek_v_Kletke)
        return Kletka(_Ячейки_Общей_Клетки)

    def make_order(self, kolich_yach_v_Ryady):
        # Метод принимающий Экземпляр Класса и количество ячеек Клетки в ряду.
        # self == указывает на сам Экземляр Класса...
        # Данный метод позволяет организовать ячейки по рядам
        #
        # Метод должен возвращать строку вида *****\n*****\n*****\n...,
        # где количество ячеек между \n равно переданному аргументу.
        #
        # Если ячеек на формирование ряда не хватает, то в последний
        # ряд записываются все оставшиеся.
        # Например, количество ячеек Клетки равняется 12, количество
        # ячеек в ряду 5. Тогда метод make_order() вернет строку
        # *****\n*****\n**
        # Или, когда количество ячеек Клетки равняется 15, количество
        # ячеек в ряду 5, ТОГДА метод вернет строку *****\n*****\n*****
        # .

        yach_1 = ''
        delenie_kletki = int(self.kolich_yacheek_v_Kletke / kolich_yach_v_Ryady)
        raznica_v_ostatok = self.kolich_yacheek_v_Kletke - (delenie_kletki*kolich_yach_v_Ryady)
        yach = "*" * kolich_yach_v_Ryady
        list_yach = []

        for i in range(0,delenie_kletki):
            list_yach.append(yach)
        if raznica_v_ostatok >= 1:
            yach_1 += "*"*raznica_v_ostatok
            list_yach.append(yach_1)
        print(list_yach)

        строка_результата = ''
        for k, el_val in enumerate(list_yach,1):
            if k == len(list_yach):
                строка_результата += el_val
                break
            строка_результата += el_val + "\\n"

        print(f"{self.kolich_yacheek_v_Kletke} ячеек Клетки, размещены по {kolich_yach_v_Ryady} ячеек(йки) в {k} Ряд(а\ов)")
        print(f"==>>  {строка_результата}  <<==")
        return f"==>>  {строка_результата}  <<=="


Kletka_class_obj_1 = Kletka(13)
Kletka_class_obj_1.make_order(3)
print("")
Kletka_class_obj_2 = Kletka(23)
Kletka_class_obj_2.make_order(5)
print("")

Био_Клетка_плюс = Kletka_class_obj_1 + Kletka_class_obj_2
print(f"Био_Клетка_плюс (общая Клетка): {Био_Клетка_плюс.kolich_yacheek_v_Kletke}")

Био_Клетка_минус = Kletka_class_obj_2 - Kletka_class_obj_1
print(f"Био_Клетка_минус: {Био_Клетка_минус}")

Био_Клетка_умножение = Kletka_class_obj_2 * Kletka_class_obj_1
print(f"Био_Клетка_умножение (общая Клетка): {Био_Клетка_умножение.kolich_yacheek_v_Kletke}")

Био_Клетка_деление = Kletka_class_obj_2 / Kletka_class_obj_1
print(f"Био_Клетка_деление (общая Клетка): {Био_Клетка_деление.kolich_yacheek_v_Kletke}")