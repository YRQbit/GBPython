# Задание-7.
#
# Описание:
# Создать вручную и заполнить несколькими строками текстовый файл,
# в котором каждая строка должна содержать данные о фирме:
# название, форма собственности, выручка, издержки.
#
# Пример строки файла: firm_1 ООО 10000 5000.
#
# Необходимо построчно прочитать файл, вычислить прибыль каждой компании,
# а также среднюю прибыль.
# Если фирма получила убытки, в расчет средней прибыли ее не включать.
# Далее реализовать список. Он должен содержать словарь с фирмами и их прибылями,
# а также словарь со средней прибылью.
# Если фирма получила убытки, также добавить ее в словарь (со значением убытков).
#
# Пример списка: [{“firm_1”: 5000, “firm_2”: 3000, “firm_3”: 1000}, {“average_profit”: 2000}].
#
# Итоговый список сохранить в виде json-объекта в соответствующий файл.
#
# Пример json-объекта:
#
# [{"firm_1": 5000, "firm_2": 3000, "firm_3": 1000}, {"average_profit": 2000}]
#
# Подсказка: использовать менеджер контекста.
#

""
import os
"""
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
ВАРИАНТ-1
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
"""
path2file = r'./less5_test_files'
name4file_read = r"/lesson_test_7.txt"
name4file_temp= r"/lesson_test_7.bak"
name4file_write= r"/lesson_test_7.json"

def profit_average():
    """ Функция-1 "Вычисление средней прибыли компаний и прибыли по каждой отдельно компании" """
    form_own = ["ПАО","АО","НКО","ИП","ООО"]
        # формируем список разделителей
        # .

    with open(path2file + name4file_read, "r+") as file_txt_read:
        # создаем файл с именем из == name4file== в локации со значением из == path2file ==
        # в режиме == w+ == и получаем доступ через объект == file_str ==
        # .

        fileline = file_txt_read.readlines()
            # получаем строки из файла и размещаем их в Списке
            # .
        dict_firm_profit={}
            # подготавливаем словарь для размещения показателей прибыли компаний,
            # где ключом будет наименование компании, а значением - показатель прибыли
            # .
        sum_profit=0 # общая сумма прибыли по компаниям без учета убытков

        for line in fileline:
            # выполняем поэлементное чтение Списка со строками
            # .
            line = line.replace(',', '.')
                # убираем "лишние" символы
                # .
            split_line = line.split()
                # выполняем разбиение полученной строки
                # (из элемента Списка == fileline ==)
                # на Список элементов по разделителю "пробел".
                # Т.о. строку вложенную в элемент, разбвиваем по разделителю
                # на новый список элементов.
                # .

            for index_spliter, spliter in enumerate(split_line):
                # запускаем цикл перебора значений в Списке == split_line ==
                # для поиска разделителя среди этих элементов
                # .
                if spliter in form_own:
                    # Выполняем проверку вхождения значения элемента spliter
                    # в Список символов разделителей == form_own == (столбец
                    # "Форма собственности")
                    # .
                    split_list = line.replace('\n','').split(spliter)
                        # Создаем новый Список с предварительной очисткой
                        # строк от символа "перенос строки" и разбиением
                        # строки на два элемента [наименование_компании, выручка_издержки]
                        # по разделителю == spliter ==.
                        # .
                    revenue, coasts = split_list[1 ].split()
                        # Элемент == выручка_издержки == Списка == split_list ==
                        # разбиваем на два элемента и присваиваем их значения
                        # соответвующим переменным.
                        # .
                    profit = round(float(revenue) - float(coasts), 2)
                        # выполняем расчет прибыли с округлением до двух символов после запятой,
                        # на основе значений переменных == revenue == и == coasts ==
                        # .
                    dict_firm_profit [ split_list [ 0 ] ] = profit
                        # размещаем полученный результат вычисления прибыли
                        # в Словарь, в качестве значения ключа с наименованием,
                        # полученным из первого по порядку элемента,
                        # Списка == split_list [ 0 ] ==
                        # .

                    if profit >= 0:
                        # в случае, когда прибыль компании выше, либо равна нулевой
                        # .
                        sum_profit += profit
                            # выполняем суммирование по значению положительной прибыли компаний
                            # .

        dict_firm_average = {"average_profit": round(sum_profit/len(dict_firm_profit), 2)}
            # создаем Словарь с расчетом средней прибыли в значении ключа == "average_profit": ==
            # .
        list4dicts = [ dict_firm_profit, dict_firm_average ]
            # создаем список из Словерей == dict_firm_profit == и == dict_firm_average ==
            # .
        print(list4dicts)
            # выводим в консоль список из Словарей
            # .
        json_data = {"json_obj_data":list4dicts}
            # упаковываем полученный результат в Словарь
            # для сериализации json-объекта
            # .

    import json
        # подключаем модуль JSON
        # пример демонстрирует возможность
        # подключения модуля в любой части кода
        # .

    #name4file_write= r"/lesson_test_7.json"
    with open(path2file + name4file_write, "w+",encoding="utf-8") as file_json_write:
        # создаем файл с именем из == name4file_write == в локации со значением из == path2file ==
        # в режиме == w+ == с кодированием в формате utf-8 и получаем доступ через объект == file_str ==
        # .
        json.dump(json_data, file_json_write, ensure_ascii=False)
            # сериализуем и дампим данные в файл с отменой ascii декодирования
            # .


def file_creator(file_path,file_name,any_file=''):
    """ Функция-2 "Запрос действий для обработки файла" """

    if not os.path.exists(path2file):
        # если директория в указанной локации отсутствует
        # .
        os.mkdir(path2file)
            # указываем путь для размещения директории и название самой директории
            # в качестве аргумента функции создания директории == mkdir == из модуля == os ==
            # .
        print("Директория создана")
    else:
        print("Создание директории не требуется")

    if os.path.exists(file_path + file_name):
        print("ФАЙЛ УЖЕ СОЗДАН")

        print("<>"*25)
        print("Перезаписать существующий файл [1]: ")
        print("Удалить существующий файл [2]: ")
        print("Отмена [3]: ")
        usr_res = input("<><><><><><><> Выберите действие: ")
        print("")

        if usr_res == '1':
            print("ВНИМАНИЕ! ВСЕ ДАННЫЕ БУДУТ БЕЗВОЗВРАТНО УДАЛЕНЫ!")
            usr_res = input("Подтвердить [Д\н]: ")
            if str(usr_res).lower() in list("д,да,yes,y"):
                # file_create = open(file_path + file_name,"w")
                # file_create.close()
                profit_average()
                    # вызываем пользовательскую Функцию-1 "Вычисление средней прибыли компаний
                    # и прибыли по каждой отдельно компании"
                    # .
                # print(f"Файл {file_create.name} перезаписан...")

        elif usr_res == '2':
            if any_file !='':
                os.remove(file_path + any_file)
                print(f"Файл {os.path.basename(file_path + file_name)} удален...")
            else:
                print("Файл для удаления не указан...")

        elif usr_res == '3' or usr_res=='':
            print("Завершение работы file_creator(file_path,file_name) ...")
            exit()
    else:
        # file_create = open(file_path + file_name, "w")
        # file_create.close()
        # print(f"Файл {file_create.name} создан!")
        profit_average()
            # вызываем пользовательскую Функцию-1 "Вычисление средней прибыли компаний
            # и прибыли по каждой отдельно компании"
            # .
        print("Файл создан!")
    return

file_creator(path2file,name4file_read)
    # Вызов Функции-2 "Запрос действий для обработки файла"
    # с позиционными аргументами, содержащими значения
    # == локация файла == и == наименование файла ==
    # .


