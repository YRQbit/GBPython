# Задание-4.
#
# Описание:
# Создать (не программно) текстовый файл со следующим содержимым:
# One — 1
# Two — 2
# Three — 3
# Four — 4
#
# Необходимо написать программу, открывающую файл на чтение
# и считывающую построчно данные.
# При этом английские числительные должны заменяться на русские.
# Новый блок строк должен записываться в новый текстовый файл.
#

""
import os
"""
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
ВАРИАНТ-1
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
"""

path2file = r'./less5_test_files'  # указываем путь для размещения файлов с данными

if not os.path.exists(path2file): # если директория в указанной локации отсутствует
    os.mkdir(path2file)
        # указываем путь для размещения директории и название самой директории
        # в качестве аргумента функции создания директории == mkdir == из модуля == os ==
        # .
    print("Директория создана")
        # выводим в консоль уведомление пользователю
        # .
else:
    print("Создание директории не требуется")
        # выводим в консоль уведомление пользователю
        # .

file_test = os.path.join(path2file,"lesson_test_4.txt")
    # формируем полный путь до будущего файла
    # методом склеивания пути до локации и наименования файла
    # .
dict_word = {1:["One","Один"],2:["Two","Два"],3:["Three","Три"],4:["Four","Четыре"]}
    # создаем словарь для последующей замены значений в Списке
    # .
dict_export={}
    # подготавливаем Словарь для размещения пар
    # с новыми значениями, например 1:Один
    # .

def compar():
    """ Функция-2 "Замена значений в строке"
    Заполняет новый Словарь с одноименными ключами,
    и с выбранными по индексу значениями этих ключей,
    из начального Словаря.
    Новый Словарь - глобальный объект.
    """

    with open(file_test,'r',encoding="utf-8") as file_str:
        # Используя конструкцию синтаксического сахара == with open(file) as ==,
        # создаем файл в локации и с именем из == file_test ==
        # в режиме == r == и получаем доступ через объект == file_str ==
        # .
        #file_str.seek(0)
            # устанавливаем курсор в начало файла
            # .

        for line in file_str:
            # чтение строк файла через цикл FOR,
            # .
            num_val = int(line.split()[2])
                # разбиваем строку по разделителю "пробел"
                # выбираем второй элемент (третье слово в строке - цифра)
                # .
            if num_val in dict_word.keys():
                # Выполняем поиск значения num_val в значениях ключей Словаря dict_word (dict_word = {1:["One","Один"],...)
                # если третье слово в строке (цифра) содержится в значении ключа словаря dict_word
                # тогда выполняем блок if
                # .
                print(f"{dict_word.get(num_val) [ 1 ]} - {num_val}")
                    # Выводим в консоль результат замены значений, например == Один - 1 ==, для этого:
                    # из доступных значений по ключу Словаря == dict_word.get(num_val) ==,
                    # выбираем первое по индексу (т.е. второе по порядку) == ...get(num_val) [ 1 ] ==
                    # значение, затем получаем значение переменной num_val и выводим полученный
                    # результат в консоль
                    # .
                dict_export[num_val] = dict_word.get(num_val)[1]
                # Добавляем в результирующий Словарь новую пару, например 1:Один, для этого
                # размещаем в Словаре dict_export новую пару, где ключом выступает значение из num_val,
                # значением - первый элемент по индексу (т.е. второй по порядку) из Словаря dict_word
                # .
    return


def file_procdata(arg_open):
    """ Функция-1 "Размещения данных в файле" """

    with open(path2file + r"/lesson_test_4_1.txt", arg_open,encoding="utf-8") as file_str_v1:
        # Выполняем открытие файла в режиме значения из arg_open
        # arg_open - может быть любым, но в основном блоке кода
        # предусмотрены 2-а варианта.
        # Либо режим == w ==, либо == a == в зависимости от выбора
        # пользователя.
        compar()
            # вызываем пользовательскую Функцию-2 "Замена значений в строке"
            # для заполнения Словаря == dict_export == новыми парами, например 1:Один
            # .

        for k in dict_export.items():
            # выполняем перебор всех элементов Списка
            # для последующей записи их значений в файл
            # .
            print(f"{k [ 1 ]} - {k [ 0 ]}",file= file_str_v1)
                # выполняем построчную запись в файл значений
                # элементов из Списка == dict_export ==
        print(f"", file=file_str_v1)
            # выполняем запись пустышки в файл
    return

if os.path.exists(path2file + r"/lesson_test_4_1.txt"):
    print("ФАЙЛ УЖЕ СОЗДАН")
    # перезаписать файл новыми данными [1]:
    # ТОГДА вызвать функцию для добавления полученных данных (передаем значение ключа режима обработки файла в функцию)
    # добавить данные в конец файла [2]:
    # ТОГДА вызвать функцию для добавления полученных данных (передаем значение ключа режима обработки файла в функцию)

    print("<>"*25)
    print("перезаписать файл новыми данными [1]")
    print("добавить данные в конец файла [2]")
    print("Отмена [3]")
    usr_res = input("<><><><> Выберите действие (по-умолчанию [1]):")
    print("")
    if (usr_res == 1) or (usr_res == ''):
        file_procdata("w")
            # вызываем Функцию-1 для создания файла в режиме == w ==
            # с последующим размещением в нем данных
    elif usr_res == 2:
        file_procdata("a")
            # вызываем Функцию-1 для создания файла в режиме == a ==
            # с последующим размещением в нем данных
    else:
        print("Завершение работы Python-скрипта...")
else:
    # В случае, когда файл не создан... создаем его.
    file_procdata("w")
        # вызываем Функцию-1 для создания файла в режиме == w ==
        # с последующим размещением в нем данных

