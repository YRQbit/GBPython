# Задание-2.
#
# Описание:
# Создать текстовый файл (не программно), сохранить в нем несколько строк,
# выполнить подсчет количества строк, количества слов в каждой строке.
#

""
import os
"""
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
ВАРИАНТ-1
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
"""

path2file = r'./less5_test_files' # указываем путь для размещения файлов с данными
if not os.path.exists(path2file):  # если директория в указанной локации отсутствует
    os.mkdir(path2file)
        # указываем путь для размещения директории и название самой директории,
        # в качестве аргумента функции создания директории == mkdir == из модуля == os ==
    print("Директория создана")
else:  # если директория существует, то создание директории не требуется
    print("Создание директории не требуется")

file_test = os.path.join(path2file,"lesson_test_2.txt")
    # формируем полный путь до будущего файла
    # методом склеивания пути до локации и наименования файла

with open(file_test,'r',encoding="utf-8") as file_str:
    # Используя конструкцию синтаксического сахара == with open(file) as ==,
    # создаем файл в локации и с именем из == file_test ==
    # в режиме == r == и получаем доступ через объект == file_str ==
    # .
    file_str.seek(0)
        # переводим курсор на начало файла,
        # иначе после первого чтения курсор висит в конце файла...
        # .
    file_lines = file_str.readlines()
        # собираем данные из файла в виде одной строки и размещаем в объекте типа Список
        # при этом перед размещением данных в Список, выполняется разбиение строки по разделителю
        # переноса строки
        # .
    file_str.seek(0)
        # переводим курсор на начало файла, иначе после первого чтения курсор висит в конце файла...
        # ВАЖНО!
        # Нужно понимать и помнить , что после первого чтения из файла, КУРСОР остается в конце файла
        # .
    file_words = file_str.read()
        # собираем данные из файла в виде строки


print(f"Количество строк в файле ==>> {len(file_lines)} строк(и)")
    # выполняем подсчет элементов в Списке, тем самым получем количество строк в файле,
    # после чего выводим в консоль полученный результат.

print(f"Количество слов в файле {file_str.name} ==>> {len(file_words.split())} слов(а)")
    # выполняем разбиение строки на элементы по разделителю == пробел ==, затем
    # выполняем подсчет элементов в полученном Списке, тем самым получем количество слов в файле.
    # НО в таком варианте в качестве слов будут учитываться и служебные символы... в случаях,
    # когда они разделены пробелами..., поэтому чуть-чуть доработаем код...

text_symbols = ["-","+","!","?",":",",",".","<",">","@","#","$","%","^","&","*","(",")","{","} "," [ "," ] "," \ "," | "," / ","\"\"\"","\"\"","\"",]
    # Создаем список символов, которые точно нельзя считать словами...
print(file_words)

def mult_replace(target_str, replace_values):
    """ Функция-1 "Комплексная замена символов"
    Функция выполняет комплексную замену символов в строке
    Где:
    target_str - строка, в которой надо заменить несколько символов из Списка символов.
                В данном случае из Списка == text_symbols ==, который мы предварительно
                загоняем в словарь == dict_symbols ==, для получения пары == ключ:значение ==
                (обязательны позиционный параметр)
    replace_values - Словарь с набором символов, где ключ это символ который надо заменить,
                а значение, это символ на который надо заменить....
                Т.е. получаем пару ==>> заменяемое:подставляемое
                (обязательны позиционный параметр)
    """
    for i,j in replace_values.items():
        # для каждой пары из словаря dict_symbols
        # .
        target_str = target_str.replace(i,j)
            # выполнить замену в строке и переприсвоить значение строки...
            # .
    return target_str
        # вернуть строку

dict_symbols={}
    # подготавливаем словарь для размещения пар символов с заменителями
    # .
for k in text_symbols:
    # для символа со значением элемента Списка text_symbols
    dict_symbols[k] = ""
        # создаем пару ключ:значение, где
        # ключ это символ со значением элемента из Списка text_symbols
        # а значение - пустышка.
        # Т.о. мы собрали Словарь с парамм, для комплексной замены символов
        # в Функции-1 "Комплексная замена символов" == mult_replace ==
        # .

file_words = mult_replace(file_words, dict_symbols)
    # выполняем переприсвоение новой строки, полученной в Функции-1,
    # Строковому объекту == file_words ==
    # .
line_split = file_words.split()
    # разбиваем полученную строку по признаку разделителя "пробел"
    # .

print(f"Количество слов в файле {file_str.name} ==>> {len(line_split)} слов(а)")
    # выводим в консоль локацию, имя файла и количество слов в файле