# Задание-6.
#
# Описание:
#
# 6. Продолжить работу над вторым заданием.
# Реализуйте механизм валидации вводимых пользователем данных.
# Например, для указания количества принтеров, отправленных на склад, нельзя использовать строковый тип данных.
# Подсказка:
# постарайтесь по возможности реализовать в проекте «Склад оргтехники»
# максимум возможностей, изученных на уроках по ООП.
#
# .


""
from abc import ABC, abstractmethod

"""
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Продукция и каталоги 
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
"""

class InitClassV1():
    """ Класс "Инициализация переменных и методов" """

    def __init__(self):
        pass

    """
    <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    """

    @property
    def model_number(self):
        """ Свойство "Номер модели". Общее свойство для всех товарных единиц"""
        return self.__модель_номер
    @model_number.setter
    def model_number(self, номер_модели:str):
        """
        Общее для всех товарных единиц, Свойство.
        Доступ :
            - допускается точечная нотация (Any_User_Class_Object.model_number = ...)
        Выполянет:
            - верификацию значения номера модели (допускается пустое значение и символы ASCII)
        Параметры:
            номер_модели:str - принимает строковое значение номера модели товарной единицы
        Переменные:
            self.__модель_номер - приватная переменная Экземляра Класса
            usr_err - локальная переменная Объекта UsrProgError
        """
        try:
            if str(номер_модели).isascii():
                self.__модель_номер = номер_модели
            else:
                self.__модель_номер = ""
                raise UsrProgError ("Ошибка: номер модели не совершенен...)) ")
        except UsrProgError as usr_err:
            print(usr_err)

    """
    <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    """

    @property
    def model_name(self):
        """ Свойство "Наименование модели". Общее свойство для всех товарных единиц """
        return self.__модель_наименование
    @model_name.setter
    def model_name(self,модель_наименование:str):
        """
        Общее свойство для всех товарных единиц.
        Доступ :
            - допускается точечная нотация, пример:
                - usr_printer = Printer()
                - usr_printer.model_name = "any_model_name..."
        Выполянет:
            - создание Свойства Экземпляра
            - присвоение полученного значения в приватную переменную
            self.__модель_наименование Экземляра Класса
        Параметры:
            модель_наименование:str - принимает строковое значение наименования модели товарной единицы
        Переменные:
            self.__модель_наименование - приватная переменная Экземляра Класса
        """
        self.__модель_наименование = модель_наименование


class Products(ABC,InitClassV1):

    @abstractmethod
    def type(self):
        """ Абстрактный Метод "Тип товарной единицы" """
        pass

    @abstractmethod
    def product2catalog(self):
        """ Абстрактный Метод конфигурирования товарных единиц"""
        pass


class Printer(Products):
    """ Класс Принтеры """

    __принтеры_каталог = {}

    """
    <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    """

    def __init__(self):
        self.__тип_принтера_list = [ "струйный", "лазерный", "матричный", "3D-принтер" ]

    """
    <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    """

    @property
    def type(self):
        return self.__тип_принтера_list
    @type.setter
    def type(self, тип_принтера):
        self.__тип_принтера_list.append(тип_принтера)

    """
    <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    """

    def product2catalog(self,тип_оборудования = type,модель_наименование = Products.model_name, модель_номер = Products.model_number):

        try:
            if модель_наименование == "" or модель_наименование == None:
                raise UsrProgError("Ошибка: Значение в наименовании отсутствует")
            else:
                self.__модель_наименование = модель_наименование

            if модель_номер == "" or модель_номер == None:
                raise UsrProgError("Ошибка: Номер модели отсутствует")
            else:
                self.__модель_номер = модель_номер

            if тип_оборудования in self.__тип_принтера_list:
                self.__тип_принтера = тип_оборудования
                if self.__принтеры_каталог == {}:
                    self.__принтеры_каталог [self.__тип_принтера ] = []
            else:
                raise UsrProgError(f"Ошибка: товарная позиция__ {тип_оборудования} __отсутствует в справочнике")

        except UsrProgError as usr_err:
            print(usr_err)
            return [ ]

        else:
            self.__принтеры_каталог [self.__тип_принтера ].append ([ self.__тип_принтера, self.__модель_наименование, self.__модель_номер ])

    """
    <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    """

    @classmethod
    def catalog_viewer(cls):
        return cls.__принтеры_каталог



class Xerox(Products):
    """ Класс Ксерокс """

    __ксероксы_каталог = {}

    """
    <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    """

    def __init__(self):
        self.__тип_ксерокса_list = [ "портативный", "Лазерный_МФУ", "Струйный_МФУ" ]

    """
    <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    """

    @property
    def type(self):
        return self.__тип_ксерокса_list
    @type.setter
    def type(self, тип_ксерокса):
        self.__тип_ксерокса_list.append(тип_ксерокса)

    """
    <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    """

    def product2catalog(self, тип_оборудования = type, модель_наименование=Products.model_name, модель_номер=Products.model_number):

        try:
            if модель_наименование == "" or модель_наименование == None:
                raise UsrProgError("Ошибка: Значение в наименовании отсутствует")
            else:
                self.__модель_наименование = модель_наименование

            if модель_номер == "" or модель_номер == None:
                raise UsrProgError("Ошибка: Номер модели отсутствует")
            else:
                self.__модель_номер = модель_номер

            if тип_оборудования in self.__тип_ксерокса_list:
                self.__тип_ксерокса = тип_оборудования
                if self.__ксероксы_каталог == {}:
                    self.__ксероксы_каталог [ self.__тип_ксерокса ] = [ ]
            else:
                raise UsrProgError(f"Ошибка: товарная позиция__ {тип_оборудования} __отсутствует в справочнике")

        except UsrProgError as usr_err:
            print(usr_err)
            return [ ]

        else:
            self.__ксероксы_каталог [ self.__тип_ксерокса ].append(
                [ self.__тип_ксерокса, self.__модель_наименование, self.__модель_номер ])

    """
    <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    """

    @classmethod
    def catalog_viewer(cls):
        return cls.__ксероксы_каталог



class Scaner(Products):
    """ Класс Сканер """

    __сканеры_каталог = {}

    """
    <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    """

    def __init__(self):
        self.__тип_сканера_list = [ "ручной", "планшетный", "потоковый", "сканер_штрих_код" ]

    """
    <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    """

    @property
    def type(self):
        return self.__тип_сканера_list
    @type.setter
    def type(self, тип_сканера):
        self.__тип_сканера_list.append(тип_сканера)

    """
    <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    """

    def product2catalog(self, тип_оборудования = type, модель_наименование=Products.model_name, модель_номер=Products.model_number):

        try:
            if модель_наименование == "" or модель_наименование == None:
                raise UsrProgError("Ошибка: Значение в наименовании отсутствует")
            else:
                self.__модель_наименование = модель_наименование

            if модель_номер == "" or модель_номер == None:
                raise UsrProgError("Ошибка: Номер модели отсутствует")
            else:
                self.__модель_номер = модель_номер

            if тип_оборудования in self.__тип_сканера_list:
                self.__тип_сканера = тип_оборудования
                if self.__сканеры_каталог == {}:
                    self.__сканеры_каталог [ self.__тип_сканера ] = [ ]
            else:
                raise UsrProgError(f"Ошибка: товарная позиция__ {тип_оборудования} __отсутствует в справочнике")

        except UsrProgError as usr_err:
            print(usr_err)
            return [ ]

        else:
            self.__сканеры_каталог [ self.__тип_сканера ].append([ self.__тип_сканера, self.__модель_наименование, self.__модель_номер ])

    """
    <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    """

    @classmethod
    def catalog_viewer(cls):
        return cls.__сканеры_каталог

    """
    <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    """


class UsrProgError(Exception):
    """ Класс "Обработка пользовательских исключений " """

    def __init__(self,text_error):
        self.err = text_error

    def __str__(self):
        return self.err


"""
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Складской комплекс 
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
"""


class InitClassV2:
    """ Класс "Инициализация переменных и методов" """

    def __init__(self,комплекс_наименование = "",факт_адрес = "",адрес_юр = ""):

        self._комплекс_наименование = комплекс_наименование
        self._факт_адрес = факт_адрес
        self._адрес_юр = адрес_юр
        self._склад_комплекс = {}


class Storehouse(InitClassV2):
    """ Класс "Складские помещения" """

    def add_2_storehouse(self, склад_номер: int, стеллаж_номер: int, полка_номер: int, место_номер: int, товар: list):
        """ Метод Класса =>> Storehouse <<= "Размещение на складе товарной позиции"
        Выполняет:
            - добавление значения товарной позиции =>> товар: list <<=,
            принимаемой в качестве позиционного параметра типа "Список",
            в защищенный словарь =>> self._склад_комплекс <<= Экземпляра
            Родительского Класса =>> InitClassV2 <<=
            - Вызов Метода =>> viewer() <<= Дочернего Класса Warehouse
        Условия выполнения:
            - Складской комплекс должен быть сформирован и сконфигурирован
            - Товарная единица должна быть добавлена в продуктовый каталог,
            либо явно указана в качестве набора значений Списка
        Пример:
            1. СК_1 = Warehouse(факт_адрес = placement_address,адрес_юр=office_address)
            2. СК_1.builder(кол_строений= 2, кол_стеллажей = 2)
            3. СК_1.constructor(склад_номер = 1,стеллаж_номер = [1,2],кол_полок=2,кол_мест_на_полке=3)
            4. принтер = Printer()
            5. принтер.product2catalog("струйный","HP","FR23F345")
            6. СК_1.add_2_storehouse(склад_номер=1,стеллаж_номер=2,полка_номер=1,место_номер=3,товар = ["Лазерный принтер","Canon","RIJ9N6K53VD"])
            7. СК_1.add_2_storehouse(склад_номер=1,стеллаж_номер=1,полка_номер=2,место_номер=1,товар= принтер.catalog_viewer()['струйный'][0])
        Переменные:
            - комплекс_объект =>> локальная переменная Метода
            - self._склад_комплекс =>> защищенная переменная Родительского
            Класса =>> InitClassV2 <<=
        Методы:
            - viewer() =>> Метод дочернего Класса Warehouse
        """

        комплекс_объект = self._склад_комплекс

        if f"склад_{склад_номер}" in комплекс_объект.keys():
            комплекс_объект [ f"склад_{склад_номер}" ] [ f"стеллаж_{стеллаж_номер}" ] [ полка_номер - 1 ] [ 1 ] [f"место_{место_номер}" ] = товар
                # добавление значения товарной позиции =>> товар: list <<=,
                # принимаемой в качестве позиционного параметра типа "Список",
                # в защищенный словарь =>> self._склад_комплекс <<= Экземпляра
                # Родительского Класса =>> InitClassV2 <<=

        print("\n"+"<>"*5 + " add_2_storehouse " + "<>"*5)
        self.viewer()
            # Вызов Метода =>> viewer() <<= Дочернего Класса

    """
    <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    """

    def viewer_places(self, склад_номер):
        """ Метод Класса =>> Storehouse <<= "Просмотр состояния мест на полках"

        Пример:
            1. СК_1 = Warehouse(факт_адрес = placement_address,адрес_юр=office_address)
            2. СК_1._комплекс_наименование = "Складской комплекс №1"
            3. СК_1.builder(кол_строений= 2, кол_стеллажей = 2)
            4. СК_1.constructor(склад_номер = 1,стеллаж_номер = [1,2],кол_полок=2,кол_мест_на_полке=3)
            5. СК_1.viewer_places(склад_номер=1)
        """
        # Результат выполнения:
        #     <><><><><> PLACES VIEWER <><><><><>
        #
        #     <><><><><> Складской комплекс №1 <><><><><>
        #       <><><><><> СКЛАД № 1 <><><><><>
        #
        #     стеллаж_1
        #     полка_1 {'место_1': [], 'место_2': [], 'место_3': []}
        #     полка_2 {'место_1': ['струйный', 'HP', 'FR23F345'], 'место_2': [], 'место_3': []}
        #     стеллаж_2
        #     полка_1 {'место_1': [], 'место_2': ['Лазерный принтер', 'Canon', 'RIJ9N6K53VD'], 'место_3': ['Лазерный принтер', 'Canon', 'RIJ9N6K53VD']}
        #     полка_2 {'место_1': [], 'место_2': [], 'место_3': []}


        комплекс_объект = self._склад_комплекс
        len_склад = len(комплекс_объект [ f"склад_{склад_номер}" ])

        print("\n" + "<>"*5 + " PLACES VIEWER " + "<>"*5)
        print("\n" + "<>"*5 + f" {self.complex_name} " + "<>"*5)
        print(" "*2 + "<>"*5 + f" СКЛАД № {склад_номер} " + "<>"*5 + "\n")

        for j in range(len_склад):
            print(f"стеллаж_{j + 1}")
            for k, l in комплекс_объект[ f"склад_{склад_номер}" ] [ f"стеллаж_{j + 1}" ]:
                print(k, l)
        print("")

    """
    <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    """

    def free_places_list(self,склад_номер=1):
        """ Метод Класса =>> Storehouse <<= "Список свободных мест"

        Пример:
            1. СК_1 = Warehouse(факт_адрес = placement_address,адрес_юр=office_address)
            2. СК_1._комплекс_наименование = "Складской комплекс №1"
            3. СК_1.builder(кол_строений= 2, кол_стеллажей = 2)
            4. СК_1.constructor(склад_номер = 1,стеллаж_номер = [1,2],кол_полок=2,кол_мест_на_полке=3)
            5. СК_1.free_places_list(склад_номер=1)
        """
        # Результат выполнения:
        #
        # <><> Складской комплекс №1 <><>
        #
        # Количество свободных мест == 9
        # Список свободных мест == [['стеллаж_1', 'полка_1', 'место_1'], ['стеллаж_1', 'полка_1', 'место_2'], ['стеллаж_1', 'полка_1', 'место_3'], ['стеллаж_1', 'полка_2', 'место_2'], ['стеллаж_1', 'полка_2', 'место_3'], ['стеллаж_2', 'полка_1', 'место_1'], ['стеллаж_2', 'полка_2', 'место_1'], ['стеллаж_2', 'полка_2', 'место_2'], ['стеллаж_2', 'полка_2', 'место_3']]


        комплекс_объект = self._склад_комплекс
        len_склад = len(комплекс_объект [ f"склад_{склад_номер}" ])
        список_своб_мест = [ ]
        кол_своб_мест = 0

        for j in range(len_склад):
            for k in range(len(комплекс_объект [ f"склад_{склад_номер}" ] [ f"стеллаж_{j + 1}" ])):
                for id_place in range(len(комплекс_объект [ f"склад_{склад_номер}" ] [ f"стеллаж_{j + 1}" ] [ k ] [ 1 ])):
                    if комплекс_объект [ f"склад_{склад_номер}" ] [ f"стеллаж_{j + 1}" ] [ k ] [ 1 ] [f"место_{id_place + 1}" ] == [ ]:
                        список_своб_мест.append([ f"стеллаж_{j + 1}", f"полка_{k + 1}", f"место_{id_place + 1}" ])
                        кол_своб_мест += 1

        print(f"<><> {self._комплекс_наименование} <><>"+"\n")
        print(f" Количество свободных мест == {кол_своб_мест}\n", f"Список свободных мест == {список_своб_мест}")
        return [ кол_своб_мест, список_своб_мест ]


"""
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
"""


class Warehouse(Storehouse,InitClassV2):
    """ Складкой комплекс """

    @property
    def complex_name(self):
        return self._комплекс_наименование
    @complex_name.setter
    def complex_name(self, комплекс_наименование):
        self._комплекс_наименование = комплекс_наименование

    """
    <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    """

    @property
    def placement_address(self):
        self.__факт_адрес = self._факт_адрес
        return self.__факт_адрес
    @placement_address.setter
    def placement_address(self, факт_адрес):
        self._факт_адрес = факт_адрес

    """
    <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    """

    @property
    def office_address(self):
        self.__адрес_юр = self._адрес_юр
        return self.__адрес_юр
    @office_address.setter
    def office_address(self, адрес_юр):
        self._адрес_юр = адрес_юр

    """
    <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    """

    def builder(self, кол_строений: int, кол_стеллажей: int):
        """ Метод Класса =>> Warehouse <<= "Создание Складского комплекса" """

        склад_base = {}

        self._склад_комплекс = dict((f"склад_{k}", склад_base.copy()) for k in range(1, кол_строений + 1))

        for k in range(1, кол_строений + 1):
            for стеллаж_номер in range(1, кол_стеллажей + 1):
                self._склад_комплекс [ f"склад_{k}" ] [ f"стеллаж_{стеллаж_номер}" ] = [ ]

        print(f"склад_1", self._склад_комплекс.get(f"склад_1"))
        print(f"склад_2", self._склад_комплекс.get(f"склад_2"))
        return self._склад_комплекс

    """
    <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    """

    def constructor(self, склад_номер:int, стеллаж_номер: list, кол_полок:int, кол_мест_на_полке:int):
        """ Метод Класса =>> Warehouse <<= "Конфигурирование складов" """

        набор_мест = {}
        for место_номер in range(1, кол_мест_на_полке + 1):
            набор_мест [ f"место_{место_номер}" ] = [ ]

        try:

            for номер_стеллажа in стеллаж_номер:
                if self._склад_комплекс [ f"склад_{склад_номер}" ] [ f"стеллаж_{номер_стеллажа}" ] == []:
                    for полка_номер in range(1, кол_полок + 1):
                        набор_полок = [f"полка_{полка_номер}",набор_мест.copy()]
                        self._склад_комплекс [ f"склад_{склад_номер}" ] [ f"стеллаж_{номер_стеллажа}" ].append(набор_полок)

        except KeyError:
            print (f"\nСтеллаж №_{номер_стеллажа} отсутствует, конфигурация не доступна.")

        return {"склад_номер":склад_номер,"стеллаж_номер":стеллаж_номер,"кол_полок":кол_полок,"кол_мест_на_полке":кол_мест_на_полке}

    """
    <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    """

    def viewer(self):
        """ Метод Класса =>> Warehouse <<= "Просмотр состояния Складского комплекса" """

        print("\n"+"<>"*5 + " viewer " + "<>"*5+"\n")
        print(" Наименование Складского комплекса: \n", self._комплекс_наименование)
        print(" Состояние СК: \n", self._склад_комплекс)
        if len(self._склад_комплекс.keys()) != 0:
            for key_name, el in self._склад_комплекс.items():
                print(f" Состояние {key_name} : {el}")
                conf_status = "on"
        else:
            print(str(" Внимание!\n Склад не сконфигурирован!").upper())
            conf_status = "off"

        return conf_status

    """
    <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    """

    def place_count(self,склад_номер:int):
        """ Метод Класса =>> Warehouse <<= "Отчет о количестве мест на складе" """

        if self.viewer() == "off":

            print("\n" + "<>"*5 + " place_count " + "<>"*5 + "\n")
            print(str(" Внимание!\n Склад не сконфигурирован!").upper())
            return

        кол_сконф_стеллажей=0
        список_колич_мест = []

        for стеллаж_номер in self._склад_комплекс [ f"склад_{склад_номер}" ].keys():
            if self._склад_комплекс [ f"склад_{склад_номер}" ] [ стеллаж_номер ] != [ ]:
                кол_сконф_стеллажей += 1
                    # количество сконфигурированных стеллажей
                кол_полок = sum([ len(self._склад_комплекс [ f"склад_{склад_номер}" ] [ стеллаж_номер ]) ])
                    # количество полок стеллажа
                for j in range(кол_полок):
                    список_колич_мест.append(len(self._склад_комплекс [ f"склад_{склад_номер}" ] [ стеллаж_номер ] [ j ][1 ]))

        print("\n" + "<>"*5 + " place_count " + "<>"*5 + "\n")
        print(self._комплекс_наименование)
        print("склад_номер >>>> ",склад_номер)
        print("кол_сконф_стеллажей >>>> ",кол_сконф_стеллажей)
        print("кол_полок >>>> ",кол_полок)
        print("Список из количеств мест на полках >>>> ",список_колич_мест)
        print(f"Общее количество мест на складе №_{склад_номер} >>>> {sum(список_колич_мест)}")

        return sum(список_колич_мест)


"""
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
"""

class Transfer:
    """ Класс "Перемещение товара" """

    __товарная_позиция:list
    __кол_товара_выдачи:int

    def __init__(self,товар,кол_товара_выдачи):

        Transfer.товарная_позиция = товар
        Transfer.кол_товара_выдачи = кол_товара_выдачи


    @classmethod
    def ск_в_ск(cls, комплекс_выдачи:object, номер_склад_выд:int, комплекс_получения: object, номер_склад_получ:int):
        """ Перемещение товара между Складскими комплексами """

        товарная_позиция_колич = []

        места_размещ_товара = {}
        j=0
        print("\n"+"<>"*5+f" __wrh_2_wrh__ "+"<>"*5+"\n")
        for склад_номер in комплекс_выдачи._склад_комплекс.keys():
            for стеллаж_номер in комплекс_выдачи._склад_комплекс[склад_номер]:
                for k,полка_номер in enumerate(комплекс_выдачи._склад_комплекс [ склад_номер ][стеллаж_номер]):
                    for j, el in комплекс_выдачи._склад_комплекс [ склад_номер ] [ стеллаж_номер ] [ k ] [ 1 ].items():

                        if el == cls.товарная_позиция:

                            товарная_позиция_колич.append(1)
                            dic_key = f"{cls.товарная_позиция [ 0 ]} " + f"{cls.товарная_позиция[1]} "+ f"{cls.товарная_позиция[2]}"

                            if места_размещ_товара == {}:
                                места_размещ_товара[dic_key] = [[склад_номер,стеллаж_номер,полка_номер[0],j]]
                            else:
                                места_размещ_товара [ dic_key ].append([склад_номер,стеллаж_номер,полка_номер[0],j])

        print(f"{cls.товарная_позиция} общее количество на всех складах комплекса  == {sum(товарная_позиция_колич)}")
        print("\n"+" Места размещения товара: \n",места_размещ_товара)

        """
        Прежде чем начать перемещение товара, мы должны понимать,
        есть ли у нас место на складах получения...
        """

        print("\n"+"<>"*5+" Поиск свободного места в СК для размещения товара"+"<>"*5+"\n")

        своб_места = комплекс_получения.free_places_list(номер_склад_получ)

        if (своб_места[0] >= cls.кол_товара_выдачи) and (sum(товарная_позиция_колич) >= cls.кол_товара_выдачи):

            print(f"Мест на складе, для размещения {sum(товарная_позиция_колич)} товарных позиций достаточно")
            k=1

            for el in своб_места[1]:

                if k <= cls.кол_товара_выдачи:

                    номер_полки = int(str(el[1]).split("_")[1])-1
                    комплекс_получения._склад_комплекс [ f"склад_{номер_склад_получ}" ] [ el [ 0 ] ] [ номер_полки ] [ 1 ] [el [ 2 ] ] = cls.товарная_позиция
                    print(комплекс_получения._склад_комплекс [ f"склад_{номер_склад_получ}" ] [ el [ 0 ] ] [ номер_полки ])
                    k+=1

        else:
            print(f"На складе НЕТ мест для размещения {sum(товарная_позиция_колич)} товарных позиций")

        """ 
        Приступаем к удалению товара со склада выдачи
        """

        for товар_ключ, список_мест_размещения in места_размещ_товара.items():

            товар_из_парам = f"{cls.товарная_позиция [ 0 ]} " + f"{cls.товарная_позиция[1]} "+ f"{cls.товарная_позиция[2]}"
            if ( товар_ключ == товар_из_парам) and (len(список_мест_размещения) >= cls.кол_товара_выдачи):
                for k in range(cls.кол_товара_выдачи):
                    склад_разм = список_мест_размещения[k][0]
                    стеллаж_разм = список_мест_размещения[k][1]
                    полка_разм = список_мест_размещения [ k ] [ 2 ]
                    место_разм = список_мест_размещения [ k ] [ 3 ]
                    mnb = int(полка_разм.split("_")[1])
                    комплекс_выдачи._склад_комплекс [ склад_разм ] [ стеллаж_разм ] [ mnb - 1 ] [ 1 ][место_разм] = []

        print("Перемещение товара выполнено!")



""" 
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Создание Объектов и размещение в них Экземпляров Класса Warehouse  
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
"""

print("\n"+"<>"*25+"\n"+"<>"*25+"\n")

placement_address = f"Луна, Обратная сторона, кратер 13"
office_address = "Земля, Россия, г.СПб, пр.Невский 98, офис 78"

СК_1 = Warehouse(факт_адрес = placement_address,адрес_юр=office_address)
СК_1._комплекс_наименование = "Складской комплекс №1"
СК_1.viewer()

placement_address = f"Марс, Южный полюс, холм 26"
office_address = "Земля, Россия, г.СПб, пр.Невский 98, офис 78"

СК_2 = Warehouse(факт_адрес = placement_address,адрес_юр=office_address)
СК_2._комплекс_наименование = "Складской комплекс №2"
СК_2.viewer()

""" 
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Конфигурирование Складских комплексов 
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
"""

print("\n"+"<>"*25+"\n"+"<>"*25+"\n")

СК_1.place_count(склад_номер=1)
    # На данном этапе, склады еще не сконфигурированы...
    # поэтому на выходе получаем результат:
    #  ВНИМАНИЕ!
    #  СКЛАД НЕ СКОНФИГУРИРОВАН!

СК_1.builder(кол_строений= 2, кол_стеллажей = 2)
СК_1.constructor(склад_номер = 1,стеллаж_номер = [1,2],кол_полок=2,кол_мест_на_полке=3)
СК_1.constructor(склад_номер = 2,стеллаж_номер = [1,3],кол_полок=2,кол_мест_на_полке=3)
    # Выполнили конфигурирование складов Складского комплекса №1

СК_2.place_count(склад_номер=2)
    # На данном этапе, склады еще не сконфигурированы...
    # поэтому на выходе получаем результат:
    #  ВНИМАНИЕ!
    #  СКЛАД НЕ СКОНФИГУРИРОВАН!

СК_2.builder(кол_строений= 2, кол_стеллажей = 2)
СК_2.constructor(склад_номер = 1,стеллаж_номер = [1,3],кол_полок=2,кол_мест_на_полке=5)
СК_2.constructor(склад_номер = 2,стеллаж_номер = [1,3],кол_полок=2,кол_мест_на_полке=3)
    # Выполнили конфигурирование складов Складского комплекса №2


СК_1.place_count(склад_номер=1)
    # <><><><><> place_count <><><><><>
    #
    # Складской комплекс №1
    # склад_номер >>>>  1
    # кол_сконф_стеллажей >>>>  2
    # кол_полок >>>>  2
    # Список количеств мест на полках >>>>  [3, 3, 3, 3]
    # Общее количество мест на складе №_1 >>>> 12
    #

СК_1.place_count(склад_номер=2)
    # <><><><><> place_count <><><><><>
    #
    # Складской комплекс №1
    # склад_номер >>>>  2
    # кол_сконф_стеллажей >>>>  1
    # кол_полок >>>>  2
    # Список количеств мест на полках >>>>  [3, 3]
    # Общее количество мест на складе №_2 >>>> 6

СК_2.place_count(склад_номер=1)
    # <><><><><> place_count <><><><><>
    #
    # Складской комплекс №2
    # склад_номер >>>>  1
    # кол_сконф_стеллажей >>>>  1
    # кол_полок >>>>  2
    # Список количеств мест на полках >>>>  [5, 5]
    # Общее количество мест на складе №_1 >>>> 10
    #

СК_2.place_count(склад_номер=2)
    # <><><><><> place_count <><><><><>
    #
    # Складской комплекс №2
    # склад_номер >>>>  2
    # кол_сконф_стеллажей >>>>  1
    # кол_полок >>>>  2
    # Список количеств мест на полках >>>>  [3, 3]
    # Общее количество мест на складе №_2 >>>> 6
    #

""" 
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Формирование каталогов продукции  
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
"""
print("\n"+"<>"*5+" принтер_продукт "+"<>"*5+"\n")

принтер = Printer()
принтер.product2catalog("струйный","HP","FR23F345")
принтер.type = "ручной"

print(f"{принтер.type}"+"\n")
print(f"{принтер.catalog_viewer()['струйный'][0]}"+"\n")

ксерокс = Xerox()
ксерокс.product2catalog("портативный","HP","FR23F345")
ксерокс.type = "фантастический"

print(f"{ксерокс.type}"+"\n")
print(f"{ксерокс.catalog_viewer()['портативный'][0]}"+"\n")

сканер = Scaner()
сканер.product2catalog("ручной","HP","FR23F345")
сканер.type = "космический"

print(f"{сканер.type}"+"\n")
print(f"{сканер.catalog_viewer()['ручной'][0]}"+"\n")



""" 
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Размещение товарной позиции на Складе №1, Складского комплекса №1 
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
"""


print("\n"+"<>"*25+"\n"+"<>"*25+"\n")

print(СК_1._склад_комплекс)
print(СК_1._комплекс_наименование)

СК_1.add_2_storehouse(склад_номер=1,стеллаж_номер=2,полка_номер=1,место_номер=3,товар = ["Лазерный принтер","Canon","RIJ9N6K53VD"])
СК_1.add_2_storehouse(склад_номер=1,стеллаж_номер=1,полка_номер=2,место_номер=1,товар = принтер.catalog_viewer()['струйный'][0])
СК_1.add_2_storehouse(склад_номер=1,стеллаж_номер=2,полка_номер=1,место_номер=2,товар = ["Лазерный принтер","Canon","RIJ9N6K53VD"])
СК_1.viewer_places(склад_номер=1)
СК_1.free_places_list(склад_номер=1)

""" 
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Перемещение товарной позиции со Склада №1, Складского комплекса №1
на Склад №2, Складского комплекса №2 
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
"""

Transfer(товар=['Лазерный принтер', 'Canon', 'RIJ9N6K53VD'],кол_товара_выдачи=2).ск_в_ск(комплекс_выдачи = СК_1,номер_склад_выд = 1, комплекс_получения = СК_2, номер_склад_получ = 2)


СК_1.free_places_list(склад_номер=1)
СК_2.free_places_list(склад_номер=2)
СК_2.viewer()

